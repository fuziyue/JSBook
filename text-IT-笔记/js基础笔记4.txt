垃圾回收机制（浏览器的垃圾回收机制）：代码执行后不保存，而会清除；
        		
        		
        	闭包函数：函数里面再嵌套的函数；
        		
        		特点：
        			闭包函数会把父级函数的变量或者参数保存在自己的作用域里面，不被垃圾回收机制给清除；
        		
        		坏处：
        			1、会占电脑内存；
        			2、会泄露数据；
        		
        		好处：
        			1、会储存父级变量或者参数的数据；
        		
        		作用：能保存父级的变量和参数；

递归函数：自己调用自己的函数；

匿名函数（自执行函数）：没有函数名的函数；
        		写法：(function (){});
        		
        	匿名函数的调用：(function (){})();
        	
        	匿名函数的传参：(function (a,b){})(1,2);
        	
        	有名函数：就是有函数名的函数；

时间系统对象：new Date();
        		1、返回结果就是时间（本机（电脑）的时间）；
        		
        	对获取的系统时间进一步的细分：
        		1、获取具体的年份：
        			getFullYear()
        		写法：
        			var n = data.getFullYear();
        		
        		2、获取具体的月份：每年的时间是从0月开始的（国际日历）；
        			getMonths();
        		写法：
        			var mon = date.getMonth()+1;
        			
        		3、获取具体的日期：
        			getDate();
        		写法：	
        			var d = date.getDate();
        			
        		4、	获取星期：
        			getDay();
        		写法：
        			var week = date.getDay();
        			0~6:
        				0:星期天；
        				6：星期六；
        		
        		5、获取小时：
        			getHouer();
        		写法：
        			var h = date.getHouer();
        			
        		5、获取分钟：
        			getMinutes();
        		写法：
        			var min = date.getMinutes();
        			
        		6、获取秒钟：
        			getSeconds();
        		写法：
        			var s = date.getSeconds();
        		
        		7、获取毫秒：
        			getMilliseconds();
        		写法：
        			var ms = date.getMilliseconds();


时间戳（时间差值）：现在的时间 - 1970.01.01.12 : 00 00（电脑发展史的开始，固定的）
        		date.getTime;

时间的获取和设置，区别在于你是否往里面传参，没传参就是获取，传参就是设置；
			
        	设置时间：
        		new Date(放值);
        			new Date(2018,9,01,1,20,45);
        			new Date(1520911124390);
        			
        	设置（改变）年：	
        		setFullYear(放值);
        	
        	设置（改变）月：
        		setMonth(放值);
        		
        	设置（改变）日：
        		setDate(放值);
        		
        	星期是不能设置的，会跟着日期的改变而改变；
        		
        	设置（改变）时：
        		setHours(放值);	
        		
        	设置（改变）分钟：
        		setMinutes(放值);
        		
        	设置（改变）秒：
        		setSeconds(放值);
        		
        	设置（改变）毫秒：
        		setMilliseconds(放值);	

length:字符串也是有长度的；
        	
        	charAt(传下标);

系统写好的函数（function）不叫函数，叫方法；
        	
        	length:字符串的字符个数；
        	
        	字符串的方法：
        		1、.charAt(i);找到字符串里面某一个字符；
        			'abcd'.charAt(2),字符就为c；
        			字符串的下标（）里不写任何内容，就默认为0下标；
        			当寻找的结果超出了范围返回的结果为空；
        		
        		2、.charCodeAt(i):找到字符所对应的unicode序号；
        		
        		3、.indexOf(参数一，参数二):
        			参数一：要找的字符；
        			参数二：从什么位置开始找；
        		
        			找到字符串里面是否有某个字符；
        				1、返回值如果为-1说明没有；
        				2、如果有这个字符，返回这个字符所在字符串里面的下标位置；
        				3、如果有多个重复一样的字符，只找首次（第一个）找到的字符；
        		
        		4、.split():把字符串切割成数组；
        			str.split(参数)
        				参数：以这个参数为切割点；
        				不写参数：默认整个字符串就是一整个数据；
        				
        		5、.toLocaleUpperCase():把字符串里面的小写字母变成大写字母，其它的什么都不管也原位不变，也不用传任何参数；
        		
        		6、.toLocaleLowerCase():把字符串里面的大写字母变成小写字母，其它的什么都不管也原位不变，也不用传任何参数；
        		
        		7、剪切一：
        			.substring() ：剪切字符串里面的某段字符；
        				str.substring（参数一，参数二）：
        					参数一：剪切的开始位置，剪切的时候，这个位置的字符会被剪切；
        					参数二：剪切的结束位置，这个位置的字符不会被剪切；
        				例子：
        				var str = '如果有多个重复';
        				var str2 = str.substring(1,5);//[1 , 5); '果有多个';
        				不写参数时，会全部剪切；
        				只写参数一时，以参数一的位置开始剪切后面的全部内容；
        				写两个参数时，参数二比参数一小时，参数二（小的数）会自动排序到参数一（大的数），然后自动取区间；
        				
        		8、剪切二：
        			.substr() : 剪切字符串里面的某段字符；
        			.substr(参数一，参数二)：
        				参数一：开始位置；
        				参数二：长度字符；
        				不写参数，整段剪切；
        				只写一个参数，以这个参数为开始一直剪切到结束；
        				写两个参数，从开始位置，剪切多少长度个字符；
	        			例子：
	        			var box = 'abcdfg';
	        			var box2 = box.substr(1,3); 'bcd' ;
	        			
	        	9、剪切三：
	        		.slice() ： 剪切字符串里面的某段字符；
	        			.slice(参数一，参数二)：
	        				参数一：
	        				参数二：
	        			剪切一个区间，这个区间的开始和结束都取值剪切；
	        			例子：
	        			var nba = 'sadsads';
	        			var nba1 = nba.slice(5,1);//[5 , 1);



JSON：结构写得像对象的字符串，它是有规律的字符串，它的本质是字符串；
        	
        	写法：
        		var json = '{name："fzy",age:22,height:178}';
        		var json2 = '[1,2,3,4,5]';


JSON转化为对象：JSON.parse();//把JSON转化为对象；
        	注意：JSON转化时，要转化标准格式写法（属性kay值必须要用""号包裹）的对象；

对象转化为JSON字符串：
        		JSON.stringify():把对象变成JSON字符串；
        	注明：对象转化JSON可以不用标准格式写法转化，只要是对象就可以转化；

in:判断一个对象里面是否拥有该属性,如果有该属性，结果为true,如果没有该属性，结果为false；
        	写法：属性 in 对象；
        		var obj = {
        			name : 'sb',
        			age : 20
        		}
        		  name in obj;

数组方法：
        		1、.push(参数):往数组的末尾里面添加数据；
        			参数：是想添加给新数组的新数据，参数可以添加多个新数据，用，号隔开，通常是一个一个新数据添加的；
        		返回值：新数组的长度（length）；
        		push()方法会改变原数组的长度（length）；
        		写法：
        			var arr = [];
        			arr.push();
        			
        		2、.pop():删除数组里面最后一个数据；
        		返回值：删除末尾的那个数据；
        		pop()的方法也会改变原数组；
        		
        		3、.shift():删除数组里面的第一个（首个）数据；
        		返回值：删除第一个的那个数据；
        		.shift()方法也会改变原数组；

数学的内置方法：
        		Math.floor(n) : 把数字向下取整数；
        		Math.ceil(n) : 把数字向上取整数；
        		
        		Math.round(n) : 把数字的小数四舍五入；
        		Math.abs(n) : 把数字取绝对值；
        		Math.random() : 随机数，随机一个0~1的任意小数(随机数不需要放参数)；
        		
        		Math.max(n) : 得到参数里面的最大值，把最大值返回出来；
        		Math.min(n) : 得到参数里面的最小值，把最小值返回出来；
        		
        		.toFixed(n小数点后几位) : 在数字的小数点后几位，取值并且会自动四舍五入；
        			写法：number..toFixed(n小数点后几位);