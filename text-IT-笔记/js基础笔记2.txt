1.赋值运算符：
				=  += -= *= /= ++ --
				
			2.关系运算符：
				< > <= >= == != ===
				
				== 特点: 只判断数值上是否相等，不管类型；
				
				=== 特点：既要判断数值上是否相等，也还要管类型；
			
			3.逻辑运算符（很重要）：
				&（与）： 
					作用：符号前面的条件为true,符号后面的条件也为true，整体结果才是true，否则都为false。
				
				||（或）：
					作用：判断条件只要一个为true，那么整体结果就是为true。
					
				！（非）：
					作业：取反义词的意思；
						把运算的值先隐式转换成布尔值，在把布尔值取反；
						
			还可以这样称呼运算符：
			一元运算符：
				++  --  typeof  !
				
			二元运算符：
				1+2 1*6  &  ||
			
			三元运算符：
				？ （三目运算符）：判断条件 ？ 判断为真的结果：判断为假的结果；



innerHTML特点:
        覆盖：是完全覆盖，把以前的所以内容全部完全删掉，而新的内容和以前的内容完全没有任何关系，内容就算一样也不是同一个内容，是没有任何事件功能等等；


        Math.floor :向下取整；
        
        <script type="text/javascript">
        	/*
        		 
        	 
        	*/
        	var num = 1.2;
        	
        	var a = Math.floor(num);
        	console.log(a);
        </script>

NAN ： not a number;
        		只要是非法运算的结果都是NAN。
        		
        	NAN ：不等于任何东西；
        	
        	判断方法：
        		isNAN : 是一个NAN；

控制流程语句(共两种)：
        		第一种：
        			if(){};
        			if(){}else{};
        			if(){}else{} if(){}else{};
        			
        			例如：if(a == 10){
        				alert(1);
        			};
        			
        		第二种：
        			switch(a){
        				case 10:
        					alert(1);
        					break;//表示中止、结束的意思；
        				case 11:
        					alert(2);
        				default:
        					alert('结束');
        			};

break ： 跳出整个循环；
			
			continue : 跳过当前这个循环；
			
			循环（共三种）：
				第一种：
        			for(var i=0;i<10;i++){
        				if(i == 5){
        					break;//跳出整个循环；
        				};
        			};
        			
        		第二种：
        			while(只写判断条件){};
        			例如：
        				var num = 0;
        				while(num < 4){
        					num++;
        				};

鼠标事件：
        		onmouseover : 鼠标移入事件；
        		
        		onmouseout  : 鼠标移出事件；
     
		<script type="text/javascript">
			var box =document.getElementById('box');
			
			//鼠标移入事件；
			box.onmouseover = function(){
				console.log('已移入了');
			};
			
			//鼠标移出事件；
			box.onmouseout = function(){
				console.log('已移出了');
			};

return（返回）特点 : 
        		1、函数调用以后的一个任意的返回值；
        		2、会终止代码继续执行；

arguments : 调用时，实参的集合，是一个类数组；
        	
        	arguments的作用范围 ：只在函数内部使用；

函数：
        		function : 创建一个函数；
        		
        		函数的作用：反复使用；
        		
        	函数写法：
        		function 函数名(){代码内容};
        	
        	让函数执行的方法(函数触发)：
        		1、函数调用； 
        			函数调用：
        				函数名() : fn();
        			
        		2、用事件触发；
        		
        	创建函数的方法:
        		1、函数声明：
        			function 函数名(){};
        			
        		2、函数表达式：
        			var a = function(){};
        	
        	函数不会自己执行，要想函数执行，就要函数调用；


函数的参数：
        		1、形参：在关键字function后面的括号里面写；
        			作用相当于一个没有赋值的变量；
        			例如：function fn(num){//相当于var num；
        				console.log(num);
        			};
        			
        		2、实参：实际的数，写在函数调用的后面的括号里面；
        		
        	函数的参数的作用范围：在函数内部；

实参和形参：一一对应；
        		函数参数可以有多个，每个参数之间以 ，（逗号）隔开；