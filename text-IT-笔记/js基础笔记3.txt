return（返回）特点 : 
        		1、函数调用以后的一个任意的返回值；
        		2、会终止代码继续执行；
        		
        	当一个函数执行完了以后，如果没有返回值，那么函数调用后的结果默认为undefinde。	

对象：
        		1、数组；
        		2、对象；
        			key : value  =>键值对；

预解析机制 : 
        		1、把所有的var 变量提前，变量值位置不变；
        			例如：
        				var a;
        				console.log(a);
        				a = 10;
        				console.log(a);
        				
        		2、把function 也提前;
        			例如：
        				function fn(){
        					console.log();
        				};
        				fn();
        				
        		3、把该提前的变化以后，按照现在排列的顺序一步一步执行；

全局变量：没有被函数function包裹的变量。
        		作用：在任意地方都能使用（获取和设置）；
        		
        	局部变量：只在一个局部范围内起作用。
        		
        	全局和局部变量的区别：
        		1、作用范围不同；
        		2、变量的命名量，局部的变量可以重复使用，而全局变量不行；
        		3、全局变量的值可以保存，而局部变量的值不可以保存；

作用域：一段js代码起作用的范围；
        	
        	作用域是以函数来划分；
        	
        	作用域链：
        		特点：1、单向性；
        			2、从里到外寻找；
        			3、只找父级和祖先级；
        	
        	函数里很重要的：参数、return、局部变量、作用域、作用域链；


onchange（改变）事件：当input里面的value值发生改变触发事件；

定时器：
        		1、延迟定时器：让代码延迟一段时间之后再执行；
        			set Time out()；
        			设置       时间    之后执行
        			
        		写法：setTimeout(function(){},5000);
        		注明：时间的单位是ms，1000=1s；
        		
        		2、间隙定时器：间隔一段时间反复执行；
        			setInterval();
        			
        		写法：setInterval(function(){},1000);	
        			定时器的关闭:clearInterval;
        			写法：clearInterval(定时器的编号);

window.onload事件:加载元素/标签，被触发；

for in循环：
	var obj = {
        		dsa:323,
        		sa:'dfd',
        		a567:null
        	};
        	for(var attr in obj){
        		console.log(obj[attr])
        	};

定时器的缺点问题：
				如果设置了点击开启定时器，再次点击开启时，原来的定时器还在，
				就等于开启了两个定时器，点击的次数会叠加，代码、效果、时间也会叠加，
				所以，再次开启定时器之前要设置关闭上一个开启的定时器，再来开启新的定时器，才不会影响定时器的效果；