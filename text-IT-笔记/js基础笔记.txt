java script(js)：客户端的脚本语言.
				服务端 = 服务器端，php java python
			交互作用
			
			js 的写法：
				1、内嵌式（在head、body写都可以，用<script>标签里面写）；
					
				2、外部引入式；

例如：
	<!--内嵌式-->
	<script type="text/javascript">...</script>
		
	<!--外部引入式-->
	<script type="text/javascript" src="..."></script>


测试代码(“（）”括号里面都可以进行简单的运算)：	
				1、console.log(1):检测错误或者打印结果、查看代码的运行结果；
				
				2、alert()：正确的会出现弹窗；


执行顺序：在html重上往下，把<script>标签放在body最后面；
		获取页面上叫box的元素
		document(文档)   .get（获得）     Element（元素）   By（通过）     Id("box")；
										     id名


JS的注释：
				1、多行注释：/**/；
				2、单行注释：//；
				
			1、变量；
				变量的关键字：
					1、var；
					例如：var a;
					
				变量的命名方式：
					1、必须以字母开头；
					2、字母开头了以后还可以写，字母、数字、下划线，就这三个；
					3、还有大小驼峰式命名；
				
			2、关键字：给一些单词赋予特色的含义或者意思；
				= ：赋值；

第一步：获取按钮元素；
			 	
			 	事件：让函数执行；
			 		1、点击事件：点击鼠标，然后运行一些指定的代码；
			 			onclick:点击事件；
			 			function:函数；
			 	" . " ：什么什么的的意思；

例如：
                        //获取元素ID叫btn和box为变量容器名字为btn和box；
  			var btn = document.getElementById('btn');
 			var box =document.getElementById('box');

			//获取标签、属性或者值，加一个事件为点击ID叫btn，会执行里面的代码；；
 			btn.onclick = function(){
	
				//检测元素ID叫box的style的color；
				console.log(box.style.color)
			}

如果a超链接，你想当成按钮来使用，必须要在href=“javascript:;”，这样就是一个单纯的按钮。

if判断语句：判断真假(只有两个条件，只有一种结果)；
        	
        		Ecmascript ： js的官方组织；
        		
        		if判断的用法：(控制语句流程)
        			一、if(这里写判断语句的条件){
        				1、如果判断语句的条件是true(真的)，那么就执行花括号里面的代码；
        				2、如果判断语句的条件是false(假的)，那么就不执行花括号里面的代码；
        			};
        			例如：if(2>1){
        				alert(“条件满足执行”)
        			}
        			
        			二、if （条件） {条件成立执行的代码} ... else {条件不成立执行的代码} ：如果判断语句的条件是true(真的)，那么就执行if花括号里面的代码；
        						                             如果判断语句的条件是false(假的)，那么就执行else花括号里面的代码；
        			例：if(2>1){
        				alert(“条件满足执行”)
        			}else{
        				alert(“条件不满足执行”)
        			}
        			
        			三、if...else  if...else  if...else：连续判断；
        			例：if(1>2){
        				alert(1)
        			}else if(3<4){
        				alert(2)
        			}else if(4<5){
        				alert(3)
        			}...
        			
        		true = 真的；
        		false = 假的；
        		
        		判断条件的命名写法：
        			1、直接写true/false;
        			2、 < , > , <= , >= , == (比较运算符号)；、
			    判断运算符：
				！=：不等于；
        			+=：在自身的基础上加；
        			-=：在自身的基础上减；
        			*=：在自身的基础上乘；
        			/=：在自身的基础上除；
        			++：在自身的基础上只加一；

代码的执行顺序：从上往下，同一行是从右往左；

数据类型：
			 		1、布尔值（boolean）：
        				true = 真的；
        				false = 假的；
        			
        			2、字符串：
        				""和'';
			 			字符串的拼接：+
			 				1、“+”号左右两边有任意其中一个字符串，那就是字符串的拼接；
			 				2、“+”号两边是number数字类型，就是数学运算；
			 			
			 		3、数字类型（number）

innerHTML : 获取元素里面所以内容，从元素的开头到结尾里面的所以内容（包括子元素、空格、注释等等）；
        	
            设置： 如果在innerHTML里面写的值像一个标签，当它写到页面的时候，浏览器就会把它解析成标签使用；

4、复合数据类型 : 
			 			（1）数组：
			 				' [..内容/值..] '  内容里面用‘ ， ’号隔开；
			 				[] ：在数组里面可以理解为：也是什么什么的意思；
			 				特点：
			 					1.数组有长度：就是数组编号里面有多少个内容；
			 						lensh ： 数组的长度；
			 						例：console.log(arr.lengsh);
			 					2.数组有固定的序号：计算机序号是固定了的，从0开始排，这个序号叫下标；
			 				
			 				作用：存数据功能；
			 				
		' . '和' [] '区别：	
			' . ' ：只能放固定的值；
			' [] ' ：可放变量；

for ： 循环/遍历；
        	
        		第一个：
        			先声明一个变量，给这个变量一个初始值：var i=2;
        		
        		第二个：判断条件：i<10;
        			
        			
        		第三个：自增：i++;
        		
        		运行：
        			第一步：
        				获取变量初始值，拿初始值和你写的值进行判断，
        				如果判断结果为真，就运行第二步；
        				如果判断结果为假，就停止运行；
        			
        			第二步：
        				执行花括号里面的代码，等代码执行完，最后执行i++,
        				i++执行完了继续执行第三步；
        				
        			第三步：
        				拿变量和条件进行判断，
        				判断结果为假，就停止运行；
        				判断结果为真，和第二步执行的一样；

例：for (var i=2;i<10;i++) {
        		console.log(i);//所以打印出来的结果为：2、3、4、5、6、7、8、9；
        	}

document.get Elements By Tag Name('标签名')[3];
        	
        	通过标签获取元素，
        	获取到的是所有的指定标签，最后结果是一个类数组，数组里面放的各个值是标签，想获取某一个具体的标签就必须通过下标获取；

例如：
		//通过li标签获取元素，元素变量为lis，此lis是一个类数组；
        	var lis = document.getElementsByTagName('li');
        	
        	//加点击事件，点击lis类数组里的序号为3的值，会执行alert()代码；
        	lis[3].onclick = function(){
        		alert();
        	};


通过class来获取标签：
        	document.getElementsByClassName('class名')；
        		
        	获取的也是一个类数组；

document.write(‘内容’) : 往页面里面写入xxx；

<script type="text/javascript">
        	//这是大循环：大循环会执行9次，从1开始到9，并且执行下面的代码；（而每大循环执行1次等于小循环执行9次）
        	for(var i=1;i<10;i++){
        		
        		//这是小循环：小循环也会执行9次，也是从1开始到9；（而每小循环执行9次等于大循环执行1次，并且执行下面的代码）
        		for(var k=1;k<10;k++){
//      			document.write();
					
					//变量k值会根据小循环到哪值就为哪值，如：当k=1时，条件成立就运行下面的代码；
        			if (k<=i) {
        				//往页面里面写入：（1x1=1x1 ），然后：i*k会自动运算为1；
        				document.write(i+"x"+k+"="+i*k+" ");
        			};
        		};
//      		document.write(i);
				//这个换行符在大循环里，也是执行9次，所以换行9次；
        		document.write("<br/>");
        	};
        </script>

关键字this ： 在事件里面，this代表的就是这个事件的前面元素；

自定义属性：
        	在js操作的时候，只有w3c定义好的属性，浏览器会把它显示出来；
        	如果属性是自定义的，那么浏览器不会显示出来，但是语句是添加成功的；

前端数据类型（共6种）：
        	一、布尔值、数字类型、字符串、未定义、空，这五种统称为基本数据类型；
        	二、数组、称为复合数据类型；
        		4、复合数据类型(object)：
        			(1)数组：
        				写法：
        				1、[];
        					var arr = ['',true,11,null];
        				2、new Array();
        					new Array('',true,11,null);
        			
        			(2)对象：一个元素就是一个对象；
        				写法：
        				obj = {
        					key(属性,可自定义)：value(值就是数据)
        				};
        				例如：var obj = {
        					' k ' ： ' 值 '，
        					' k ' ： 1122，
        					' k ' ： true，
        					' k ' ： 'box'，    //k是属性，：是 =；
        					};
        	
        		5、未定义（Undefind）：一个变量没有赋值的时候；
        		
        		6、空（null）：一个元素没有找到；

强制类型的转换：
        		注：NaN : not a number(不是数字的数字);
        			只要不是纯数字就会得到NaN；
        		一、数字强制转换的方法：
        			1、Number 方法：
        				特点：
        				（1）把纯数字的字符串转换成数字类型，如果字符串不是纯数字，结果就是NaN；
        					
        				（2）布尔值：
        					true = 1;
        					false = 0;
        				写法：	
        				例如：
        					var str = '12';
        					var num = Number(str);
        					cosole.log(num,str);
        				
        			2、parseInt() 方法：
        				特点：
        				（1）把其它类型转换成数字类型，并取整数；
        				
        				（2）a、以数字开头：转换时会一直转换到非数字；
        					b、以非数字开头：结果就是NaN;
        					
        				(3)不能转换非数字；	
        				写法：
        				例如：
        					var str = '12';
        					var nums = parseInt(str);
        					
        			3、parseFloat() 方法:
        				特点：
        				（1）把其它类型转换成数字类型，并且不取整数；
        				
        				（2）a、以数字开头：转换时会一直转换到非数字；
        					b、以非数字开头：结果就是NaN;
        					
        				(3)不能转换非数字；
        				写法：
        				例如：
        					var str = '12';
        					var nums = parseFloat(str);
        			
        	隐式类型的转换：
        		- ：就具有隐式转换的功能，能把非数字的值转换成数字，与Number方法相识；
        		
        		+ ：也具有隐式转换的功能，但是是把其它转换成了字符串的拼接；
        		
        		if() ：也具有隐式转换的功能，但是是把判断的结果转换成布尔值（true和false）；

if的隐式转换：
        		1、用判断运算符计算的结果只有布尔值；
        		
        		2、if里面会把0隐式转换成false，其它任何纯数字都是true；
        		
        		3、if里面会把空字符串（''）转换成false，其它任何字符串(包括：" 空格  "都是内容)都是true；

取模：%；
        		a%b
        			1、a < b  => a;
        			2、a = b  => 0;
        			3、a > b  => 取余数；