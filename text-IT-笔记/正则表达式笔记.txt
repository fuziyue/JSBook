正则表达式：用来筛选字符串，又叫火星文；
        		
        	正则表达式的写法：（有两种）
        		1、var par = /xxx/; /内容/
        		2、var par2 = new RegExp();
        		区别：第一种写法不能放变量，只能是字符串，而第二种写法可以放变量；


test(): 
        		作用：把正则表达式去匹配一个字符串，如果能匹配到，就返回true，否则false；
        		写法：正则.test(字符串)；


转意字符：
        	\ ：转意符；
        	特殊含义的字母或者符号：
        		\d ：0~9任意一个数字；
        		\D ：一个非数字；
        		
        		\w : 数字、字母、下划线任意一个都可以；
        		\W : 一个非数字、字母、下划线任意一个都可以；
        		
        		\s : 有空格就行；
        		\S ：非空格就行；
        		
        		| ： 或者的意思；
        		
        		^xx : 以什么什么开头，然后和其它转意符搭配使用来达成限定条件；
        		
        		xx$ : 以什么什么结尾，然后和其它转意符搭配使用来达成限定条件；
        		
        		. : 任意东西，或者没有东西都可以；
        		\. : 就代表“ . ”；
        		
        		\\ : 就代表“ \\ ”;  


量词 ： 为匹配提供一个范围；
        	
        	+ ：至少有一个；
        	? ： 最多有一个；
        	
        	{} ： 区间；
        	例子： d{2，5} ： 2~5区间之间的数字，包括第2个数字和第5个数字；
        		  d{2，} ：2~正无穷区间；
        		  d{5} : 就是5个数字；
        		  
        	[0-6] : 0~6范围内任意选一个，只能选一个；
        	[a-z|A~Z] : 大小写字母a~z范围内任意选一个，只能选一个；
        	      	
        	[^a-z] : 排开小写字母的某一个；


第一个方法：
			
        	search():拿正则表达式去匹配字符串里面的某个数，如果能匹配到，就返回这个字符串在字符串的位置，如果匹配不到就返回-1；
        	
        	i : 忽略大小写，写在正则后面；/sS/i;


第二个方法：
        	
        	match(): 把正则匹配到的字符放到一个数组里面，然后返回出来，如果没有就返回一个空数组；
        	
        	g : 全局；


第三个方法：
                replace() : 替换；
			用法：
        		1、str.replace(par,'***') : 正则，替换的字符；
        		2、str.replace(par,function($0){return *});  
        			参数$0 : 匹配到的字符；
        			return : 替换的字符；
